[{"E:\\ReactEcommerceFrontend\\ecommerce\\src\\index.js":"1","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Header\\Header.jsx":"2","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SideImages\\Sideimg.jsx":"3","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Login\\App.jsx":"4","E:\\ReactEcommerceFrontend\\ecommerce\\src\\store\\index.js":"5","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Login\\Login.jsx":"6","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SignUp\\App.jsx":"7","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SignUp\\SignUp.jsx":"8","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\App.jsx":"9","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\FeedBackForm.jsx":"10","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\FeedWrite.jsx":"11","E:\\ReactEcommerceFrontend\\ecommerce\\src\\App.jsx":"12","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Footer\\Footer.jsx":"13","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\App.jsx":"14","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\userReducers.js":"15","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\user.type.js":"16","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\user.actions.js":"17","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\userapi.js":"18","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\history.js":"19","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\feedbackreducer.js":"20","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\feedback\\feedback.type.js":"21","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\feedback\\feedback.actions.js":"22","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\feedbackapi.js":"23","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\ProductContainer.jsx":"24","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\Filter.jsx":"25","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\ProductCard.jsx":"26","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\productReducer.js":"27","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\product\\product.type.js":"28","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\product\\product.action.js":"29","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\productapi.js":"30","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Spinner\\Spinner.jsx":"31","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\ProductDetails\\ProductDetail.jsx":"32","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\Header.js":"33","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\auth.js":"34","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\localStorage.js":"35","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\Cooky.js":"36","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\Routes\\AdminRoute.js":"37","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\AdminDashBoard.jsx":"38","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\cartreducer.js":"39","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\Cart.jsx":"40","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\cart\\cart.type.js":"41","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\CartDetail.jsx":"42","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\CartBill.jsx":"43","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\cart\\cart.actions.js":"44","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\cartapi.js":"45","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\Routes\\UserRoute.js":"46","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\reviewReducer.js":"47","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\reviews\\reviews.type.js":"48","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\reviews\\reviews.action.js":"49","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\reviewapi.js":"50","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\ProductAdmin.jsx":"51","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\FeedBackAdmin.jsx":"52","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\CategoryAdmin.jsx":"53","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\SubCategory.jsx":"54","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\subcategoryreducer.js":"55","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\subcategory\\subcategory.action.js":"56","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\subcategory\\subcategory.type.js":"57","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\getSubcategory.js":"58","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\forgotPassword\\App.jsx":"59","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\forgotPassword\\forgotPassword.jsx":"60","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\resetPassword\\App.jsx":"61","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\resetPassword\\ResetPassword.jsx":"62","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\categoryreducer.js":"63","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\category\\category.type.js":"64","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\category\\category.action.js":"65","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\categoryapi.js":"66","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\forgotreducer.js":"67","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\forgot\\forgot.type.js":"68","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\forgot\\forgot.action.js":"69","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\forgotpasswordapi.js":"70","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\ShippingScreen.jsx":"71","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\CheckOutSteps.jsx":"72","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\Payment.jsx":"73","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\PlaceOrder.jsx":"74","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\orderreducer.js":"75","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\ordershipping\\order.type.js":"76","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\App.jsx":"77","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\OrderList.jsx":"78","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\UserProfile.jsx":"79","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\ordershipping\\order.action.js":"80","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\ordershippingapi.js":"81","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\OrderDetail.jsx":"82","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\OrderAdmin.jsx":"83"},{"size":766,"mtime":1611643520049,"results":"84","hashOfConfig":"85"},{"size":6283,"mtime":1612364895077,"results":"86","hashOfConfig":"85"},{"size":353,"mtime":1610263848465,"results":"87","hashOfConfig":"85"},{"size":731,"mtime":1611236396365,"results":"88","hashOfConfig":"85"},{"size":2363,"mtime":1612567119942,"results":"89","hashOfConfig":"85"},{"size":5648,"mtime":1611594062730,"results":"90","hashOfConfig":"85"},{"size":736,"mtime":1611164145409,"results":"91","hashOfConfig":"85"},{"size":11017,"mtime":1610601555613,"results":"92","hashOfConfig":"85"},{"size":947,"mtime":1610347899395,"results":"93","hashOfConfig":"85"},{"size":5982,"mtime":1610607170590,"results":"94","hashOfConfig":"85"},{"size":1415,"mtime":1610346156330,"results":"95","hashOfConfig":"85"},{"size":3459,"mtime":1612441646928,"results":"96","hashOfConfig":"85"},{"size":361,"mtime":1612359196619,"results":"97","hashOfConfig":"85"},{"size":1574,"mtime":1612692025098,"results":"98","hashOfConfig":"85"},{"size":1335,"mtime":1612683429027,"results":"99","hashOfConfig":"85"},{"size":278,"mtime":1612682963634,"results":"100","hashOfConfig":"85"},{"size":5107,"mtime":1612685418435,"results":"101","hashOfConfig":"85"},{"size":894,"mtime":1612683206455,"results":"102","hashOfConfig":"85"},{"size":96,"mtime":1610347416142,"results":"103","hashOfConfig":"85"},{"size":968,"mtime":1611496998048,"results":"104","hashOfConfig":"85"},{"size":202,"mtime":1611423111355,"results":"105","hashOfConfig":"85"},{"size":2660,"mtime":1611668434262,"results":"106","hashOfConfig":"85"},{"size":722,"mtime":1611559046622,"results":"107","hashOfConfig":"85"},{"size":739,"mtime":1612533527232,"results":"108","hashOfConfig":"85"},{"size":1764,"mtime":1612691987089,"results":"109","hashOfConfig":"85"},{"size":18356,"mtime":1612623336742,"results":"110","hashOfConfig":"85"},{"size":2155,"mtime":1611681561404,"results":"111","hashOfConfig":"85"},{"size":291,"mtime":1611680947291,"results":"112","hashOfConfig":"85"},{"size":4008,"mtime":1612690295008,"results":"113","hashOfConfig":"85"},{"size":1054,"mtime":1612690056472,"results":"114","hashOfConfig":"85"},{"size":286,"mtime":1610660626233,"results":"115","hashOfConfig":"85"},{"size":9232,"mtime":1612682838030,"results":"116","hashOfConfig":"85"},{"size":275,"mtime":1612571028756,"results":"117","hashOfConfig":"85"},{"size":542,"mtime":1611418687204,"results":"118","hashOfConfig":"85"},{"size":288,"mtime":1611240033308,"results":"119","hashOfConfig":"85"},{"size":270,"mtime":1611240421296,"results":"120","hashOfConfig":"85"},{"size":574,"mtime":1611417901294,"results":"121","hashOfConfig":"85"},{"size":3812,"mtime":1612564465262,"results":"122","hashOfConfig":"85"},{"size":2316,"mtime":1612625660847,"results":"123","hashOfConfig":"85"},{"size":1113,"mtime":1612544656272,"results":"124","hashOfConfig":"85"},{"size":282,"mtime":1611844710651,"results":"125","hashOfConfig":"85"},{"size":5554,"mtime":1612626885188,"results":"126","hashOfConfig":"85"},{"size":1678,"mtime":1612557016020,"results":"127","hashOfConfig":"85"},{"size":2543,"mtime":1612626845683,"results":"128","hashOfConfig":"85"},{"size":725,"mtime":1612445554160,"results":"129","hashOfConfig":"85"},{"size":748,"mtime":1612442224856,"results":"130","hashOfConfig":"85"},{"size":361,"mtime":1611418653409,"results":"131","hashOfConfig":"85"},{"size":146,"mtime":1611407116339,"results":"132","hashOfConfig":"85"},{"size":1499,"mtime":1612560624974,"results":"133","hashOfConfig":"85"},{"size":539,"mtime":1611414949411,"results":"134","hashOfConfig":"85"},{"size":11550,"mtime":1612451337631,"results":"135","hashOfConfig":"85"},{"size":2942,"mtime":1611504131070,"results":"136","hashOfConfig":"85"},{"size":7179,"mtime":1612456733692,"results":"137","hashOfConfig":"85"},{"size":7666,"mtime":1612532007648,"results":"138","hashOfConfig":"85"},{"size":1407,"mtime":1611749346420,"results":"139","hashOfConfig":"85"},{"size":3179,"mtime":1612685929445,"results":"140","hashOfConfig":"85"},{"size":201,"mtime":1611506737850,"results":"141","hashOfConfig":"85"},{"size":794,"mtime":1611560593336,"results":"142","hashOfConfig":"85"},{"size":751,"mtime":1611582627595,"results":"143","hashOfConfig":"85"},{"size":4936,"mtime":1611683626758,"results":"144","hashOfConfig":"85"},{"size":749,"mtime":1611585254812,"results":"145","hashOfConfig":"85"},{"size":7020,"mtime":1611647219663,"results":"146","hashOfConfig":"85"},{"size":1365,"mtime":1611588994347,"results":"147","hashOfConfig":"85"},{"size":178,"mtime":1611588709328,"results":"148","hashOfConfig":"85"},{"size":2950,"mtime":1612685891369,"results":"149","hashOfConfig":"85"},{"size":792,"mtime":1612454881992,"results":"150","hashOfConfig":"85"},{"size":718,"mtime":1611592672032,"results":"151","hashOfConfig":"85"},{"size":144,"mtime":1611590463605,"results":"152","hashOfConfig":"85"},{"size":2227,"mtime":1611594397629,"results":"153","hashOfConfig":"85"},{"size":557,"mtime":1611590346203,"results":"154","hashOfConfig":"85"},{"size":7316,"mtime":1612546593652,"results":"155","hashOfConfig":"85"},{"size":1301,"mtime":1612285336415,"results":"156","hashOfConfig":"85"},{"size":3548,"mtime":1612561692139,"results":"157","hashOfConfig":"85"},{"size":5833,"mtime":1612561957498,"results":"158","hashOfConfig":"85"},{"size":3415,"mtime":1612627619626,"results":"159","hashOfConfig":"85"},{"size":972,"mtime":1612566184983,"results":"160","hashOfConfig":"85"},{"size":556,"mtime":1612365766464,"results":"161","hashOfConfig":"85"},{"size":2866,"mtime":1612683474374,"results":"162","hashOfConfig":"85"},{"size":5537,"mtime":1612685521056,"results":"163","hashOfConfig":"85"},{"size":4301,"mtime":1612571657456,"results":"164","hashOfConfig":"85"},{"size":1266,"mtime":1612622134792,"results":"165","hashOfConfig":"85"},{"size":6920,"mtime":1612684140143,"results":"166","hashOfConfig":"85"},{"size":3066,"mtime":1612622503534,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"1r50iwj",{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"170"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"170"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"170"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"170"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"170"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"170"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"170"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"170"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"170"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"170"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"170"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"170"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"170"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"170"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"170"},"E:\\ReactEcommerceFrontend\\ecommerce\\src\\index.js",[],["351","352"],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Header\\Header.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SideImages\\Sideimg.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Login\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\store\\index.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Login\\Login.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SignUp\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\SignUp\\SignUp.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\FeedBackForm.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\FeedBack\\FeedWrite.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Footer\\Footer.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\App.jsx",["353"],"import React, { Component } from 'react'\r\nimport Filter from './Filter'\r\nimport ProductContainer from './ProductContainer'\r\nimport { productInfo } from '../../actions/product/product.action'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        //console.log(\"APP PROPS\", this.props)\r\n        this.props.productInfo()\r\n        //console.log(this.props.productInfo)\r\n    }\r\n    render() {\r\n        if (this.props.loading) { return <Spinner /> }\r\n        if (!this.props.ShowProductDetails) { return null };\r\n        return (\r\n            <>\r\n                <div className=\"container-fluid card shadow-lg mt-4\">\r\n                    <div className=\"row\">\r\n                        {/* <div className=\"col-md-3 mt-2\" style={{ height: 1000 }}>\r\n                            <Filter />\r\n                        </div> */}\r\n                        <div className=\"col-md-12 mt-2\">\r\n                            <ProductContainer\r\n                                product={this.props.ShowProductDetails}\r\n                                {...this.props}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(\"PRODUCT  MAP\", state)\r\n    return {\r\n        ShowProductDetails: state.ShowProductDetails.item,\r\n        loading: state.ShowProductDetails.loading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { productInfo })(App)","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\userReducers.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\user.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\user.actions.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\userapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\history.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\feedbackreducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\feedback\\feedback.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\feedback\\feedback.actions.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\feedbackapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\ProductContainer.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\Filter.jsx",["354"],"import React, { useEffect, useState } from 'react'\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { useDispatch } from 'react-redux'\r\nimport { productInfo } from '../../actions/product/product.action'\r\nexport default function Filter() {\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useDispatch();\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        console.log(newValue)\r\n        dispatch(productInfo(newValue))\r\n    };\r\n\r\n    console.log(\"New Value of v\", value)\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\" style={{ height: 900 }}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"card text-center\" style={{ height: 700 }}>\r\n                            <div className=\"card-body\" style={{ outline: 'none' }}>\r\n                                <h4 className=\"card-title text-center bold\">Price</h4>\r\n                                <hr />\r\n                                <Slider\r\n                                    defaultValue={value}\r\n                                    min={200}\r\n                                    orientation=\"vertical\"\r\n                                    aria-labelledby=\"vertical-slider\"\r\n                                    step={1000}\r\n                                    max={100000}\r\n                                    value={value}\r\n                                    valueLabelDisplay=\"on\"\r\n                                    onChange={handleChange}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Home\\ProductCard.jsx",["355","356","357","358","359","360"],"import React, { useEffect } from 'react'\r\nimport { isAuthenticated } from '../../shared/helper/auth'\r\nimport { DeleteProductAction, UpdateProductAction, productInfoById } from '../../actions/product/product.action'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getCatActions } from '../../actions/category/category.action'\r\nimport { getSubCatActions } from '../../actions/subcategory/subcategory.action'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\nconst formSchema = Yup.object().shape({\r\n    PName: Yup.string()\r\n        .min(5, \"It must contain 5 characters\"),\r\n\r\n    Description: Yup.string()\r\n        .min(30, \"It must contain 30 characters\"),\r\n\r\n    Price: Yup.number(),\r\n\r\n    Quantity: Yup.number(),\r\n\r\n    Category: Yup.string(),\r\n\r\n    SubCategory: Yup.string(),\r\n\r\n    PImage: Yup.mixed(),\r\n})\r\n\r\nexport default function ProductCard(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const getProductDetails = useSelector(state => state.ShowProductDetailsId)\r\n\r\n\r\n    const { loading, item, error } = getProductDetails;\r\n    useEffect(() => {\r\n        dispatch(getCatActions())\r\n        dispatch(getSubCatActions())\r\n    }, [dispatch])\r\n\r\n    const getCatDetails = useSelector(state => state.getCatreducer)\r\n    const getSubCatDetails = useSelector(state => state.getSubCatreducer)\r\n\r\n    const { data, loading: postOrederLoading, error: postOrederError } = getCatDetails;\r\n    console.log(\"DATA CAT\", data)\r\n\r\n    const { data: datacat, loading: postSubLoading, error: postSubError } = getSubCatDetails;\r\n    console.log(\"DATA SUBCAT\", datacat)\r\n\r\n\r\n    const productIDdata = (id) => {\r\n        dispatch(productInfoById(id))\r\n    }\r\n\r\n\r\n\r\n    const formatCurrency = (value) => {\r\n        return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'INR', currencyDisplay: 'narrowSymbol' }).format(value)\r\n    }\r\n\r\n    const formatDescription = (value) => {\r\n        if (!value) {\r\n            return null\r\n        }\r\n        return value.substring(1, 60) + \"................\";\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"col-md-4\">\r\n            <div className=\"card-deck shadow-lg m-2\">\r\n                <div className=\"p-2\">\r\n                    <img className=\"img img-responsive img-fluid img-thumbnail\" src={props.items.PImage} alt=\"Loading...\" style={{ width: 300, height: 300 }} />\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">{props.items.PName}</h4>\r\n                    <p className=\"card-text\">{formatCurrency(props.items.Price)}</p>\r\n                    <p className=\"card-text\">{formatDescription(props.items.Description)}</p>\r\n                    <div className=\"align-self-center\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary w-100 m-2\"\r\n                            onClick={() => props.add.push(`/productdetails/${props.items._id}`)}\r\n                        >\r\n                            Check Product\r\n                    </button>\r\n\r\n                        {\r\n                            isAuthenticated() && isAuthenticated().data.data.user.role === \"Admin\" && (\r\n                                <>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-warning w-100 m-2\"\r\n                                        data-toggle=\"modal\" data-target=\"#exampleModal3\"\r\n                                        onClick={() => productIDdata(props.items.id)}\r\n                                    >\r\n                                        Edit Product\r\n                                    </button>\r\n                                    <div className=\"modal fade\" id=\"exampleModal3\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                                        <div className=\"modal-dialog\" role=\"document\">\r\n                                            <div className=\"modal-content\">\r\n                                                <div className=\"modal-header\">\r\n                                                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Product Info</h5>\r\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                                        <span aria-hidden=\"true\">&times;</span>\r\n                                                    </button>\r\n                                                </div>\r\n                                                <div className=\"modal-body\">\r\n\r\n                                                    {(!item) ? <h1>LOADING..</h1> : <Formik\r\n                                                        initialValues={\r\n                                                            {\r\n                                                                PName: item.PName,\r\n                                                                Description: item.Description,\r\n                                                                Price: item.Price,\r\n                                                                Quantity: item.Quantity,\r\n                                                                Category: '',\r\n                                                                SubCategory: '',\r\n                                                                PImage: item.PImage\r\n                                                            }\r\n                                                        }\r\n                                                        validationSchema={formSchema}\r\n                                                        onSubmit={async (values, actions) => {\r\n                                                            await sleep(500);\r\n                                                            console.log(values)\r\n                                                            let d = new FormData();\r\n                                                            d.append('PName', values.PName)\r\n                                                            d.append('Description', values.Description)\r\n                                                            d.append('Price', values.Price)\r\n                                                            d.append('Quantity', values.Quantity)\r\n                                                            d.append('Category', values.Category)\r\n                                                            d.append('SubCategory', values.SubCategory)\r\n                                                            d.append('PImage', values.PImage)\r\n                                                            dispatch(UpdateProductAction(item.id, d))\r\n                                                            setTimeout(() => {\r\n                                                                actions.setSubmitting(false)\r\n                                                                actions.resetForm()\r\n                                                            }, 1000)\r\n                                                        }}\r\n                                                    >\r\n                                                        {({ isSubmitting, touched, errors, values, setFieldValue }) => (\r\n                                                            <Form>\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        id=\"PName\"\r\n                                                                        type=\"text\"\r\n                                                                        name=\"PName\"\r\n                                                                        placeholder=\"Enter the Product Name\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        values={values.PName}\r\n                                                                        className={`form-control  ${(touched.PName && errors.PName) ? 'border border-danger' : ''}`}\r\n                                                                    />\r\n                                                                    <ErrorMessage name=\"PName\" />\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        id=\"Description\"\r\n                                                                        type=\"text\"\r\n                                                                        name=\"Description\"\r\n                                                                        placeholder=\"Description\"\r\n                                                                        values={values.Description}\r\n                                                                        autoComplete=\"off\"\r\n                                                                        className={`form-control  ${(touched.Description && errors.Description) ? 'border border-danger' : ''}`}\r\n                                                                    />\r\n                                                                    <ErrorMessage name=\"Description\" />\r\n                                                                </div>\r\n\r\n\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        id=\"Price\"\r\n                                                                        type=\"number\"\r\n                                                                        name=\"Price\"\r\n                                                                        values={values.Price}\r\n                                                                        placeholder=\"Price\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        className={`form-control  ${(touched.Price && errors.Price) ? 'border border-danger' : ''}`}\r\n                                                                    />\r\n                                                                    <ErrorMessage name=\"Price\" />\r\n                                                                </div>\r\n\r\n\r\n\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        id=\"Quantity\"\r\n                                                                        type=\"number\"\r\n                                                                        name=\"Quantity\"\r\n                                                                        placeholder=\"Quantuty\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        values={values.Quantity}\r\n                                                                        className={`form-control  ${(touched.Quantity && errors.Quantity) ? 'border border-danger' : ''}`}\r\n                                                                    />\r\n                                                                    <ErrorMessage name=\"Quantity\" />\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        component=\"select\"\r\n                                                                        name=\"Category\"\r\n                                                                        className={`form-control  ${(touched.Category && errors.Category) ? 'border border-danger' : ''}`}\r\n                                                                    >\r\n\r\n\r\n                                                                        {(!data) ? <h1>LOADING..</h1> : data.map((catitem) => {\r\n                                                                            return (\r\n\r\n                                                                                <option key={catitem._id} value={catitem._id} label={catitem.cname} />\r\n                                                                            )\r\n                                                                        })}\r\n\r\n\r\n                                                                    </Field>\r\n                                                                    <ErrorMessage name=\"Category\" />\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group\">\r\n                                                                    <Field\r\n                                                                        component=\"select\"\r\n                                                                        name=\"SubCategory\"\r\n                                                                        values={values.PImage}\r\n                                                                        className={`form-control  ${(touched.SubCategory && errors.SubCategory) ? 'border border-danger' : ''}`}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            (!datacat) ? <h1>LOADING</h1> : datacat.map((catitem) => {\r\n                                                                                return (\r\n\r\n                                                                                    <option key={catitem._id} value={catitem._id} label={catitem.subname} />\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </Field>\r\n                                                                    <ErrorMessage name=\"SubCategory\" />\r\n                                                                </div>\r\n                                                                <div className=\"form-group\">\r\n                                                                    <input\r\n                                                                        type=\"file\"\r\n                                                                        name=\"PImage\"\r\n                                                                        values={values.PImage}\r\n                                                                        className={`form-control  ${(touched.PImage && errors.PImage) ? 'border border-danger' : ''}`}\r\n                                                                        onChange={(event) => { setFieldValue(\"PImage\", event.target.files[0]) }\r\n                                                                        }\r\n                                                                    />\r\n\r\n\r\n                                                                    <ErrorMessage name=\"PImage\" />\r\n                                                                </div>\r\n\r\n                                                                <div>\r\n                                                                    <button\r\n                                                                        type=\"submit\"\r\n                                                                        className=\"btn btn-primary btn-block\"\r\n                                                                        disabled={isSubmitting}\r\n                                                                    >\r\n                                                                        {isSubmitting ? \"Please Wait\" : \"Update Product\"}\r\n                                                                    </button >\r\n                                                                </div>\r\n                                                            </Form>\r\n                                                        )}\r\n                                                    </Formik>}\r\n\r\n\r\n                                                </div>\r\n                                                <div className=\"modal-footer\">\r\n                                                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-danger w-100 m-2\"\r\n                                        onClick={() => dispatch(DeleteProductAction(props.items._id))}\r\n                                    >\r\n                                        Delete Product\r\n                                    </button>\r\n                                </>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\productReducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\product\\product.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\product\\product.action.js",["361"],"import { GET_PRODUCT, ERROR, GET_PRODUCTID, LOADING, POST_PRODUCT, UPDATE_PRODUCT, DELETE_PRODUCT } from './product.type'\r\nimport { getProduct, getProductbyId, deleteProductId, UpdateProduct, postproductapi } from '../../api/productapi'\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const productInfo = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: LOADING });\r\n            if (!data) {\r\n                var response = await getProduct();\r\n                //console.log(\"PRODUCT ACTION\", response)\r\n                setTimeout(() => {\r\n                    dispatch({\r\n                        type: GET_PRODUCT,\r\n                        payload: response.data.data,\r\n                    })\r\n                }, 1000)\r\n            }\r\n            else {\r\n                var response = await getProduct(data);\r\n                //console.log(\"PRODUCT ACTION\", response)\r\n\r\n                dispatch({\r\n                    type: GET_PRODUCT,\r\n                    payload: response.data.data,\r\n                })\r\n\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: ERROR, payload: error.response.data });\r\n        }\r\n    }\r\n}\r\n\r\nexport const productInfoById = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            // dispatch({ type: LOADING });\r\n            var response = await getProductbyId(id);\r\n            console.log(\"PRODUCT ACTION BY ID\", response)\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: GET_PRODUCTID,\r\n                    payload: response.data.data,\r\n                })\r\n            }, 1000)\r\n\r\n        } catch (error) {\r\n            dispatch({ type: ERROR, payload: error.response.data });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const postProductAction = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n\r\n            var response = await postproductapi(data);\r\n            console.log(\"PRODUCT ACTION DATE\", response)\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: POST_PRODUCT,\r\n                    payload: response.data,\r\n                })\r\n            }, 1000)\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: `Added Successfully`,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n            })\r\n\r\n        } catch (error) {\r\n            dispatch({ type: ERROR, payload: error.response.data });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const UpdateProductAction = (id, data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            //dispatch({ type: LOADING });\r\n            var response = await UpdateProduct(id, data);\r\n            console.log(\"PRODUCT ACTION BY ID\", response)\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: UPDATE_PRODUCT,\r\n                    payload: response.data.data,\r\n                })\r\n            }, 1000)\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: `Updated Successfully`,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n            })\r\n        } catch (error) {\r\n            dispatch({ type: ERROR, payload: error.response.data });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const DeleteProductAction = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: LOADING });\r\n            var response = await deleteProductId(id);\r\n            console.log(\"PRODUCT ACTION BY ID\", response)\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: DELETE_PRODUCT,\r\n                    payload: response.data,\r\n                })\r\n            }, 1000)\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: `Deleted Successfully`,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n            })\r\n            dispatch(productInfo());\r\n\r\n        } catch (error) {\r\n            dispatch({ type: ERROR, payload: error.response.data });\r\n        }\r\n    }\r\n}","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\productapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Spinner\\Spinner.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\ProductDetails\\ProductDetail.jsx",["362"],"import React, { Component } from 'react'\r\nimport Rating from 'material-ui-rating'\r\nimport { productInfoById } from '../../actions/product/product.action'\r\nimport { postcartAction } from '../../actions/cart/cart.actions'\r\nimport { postReviewAction } from '../../actions/reviews/reviews.action'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { connect } from 'react-redux'\r\nimport { isAuthenticated } from '../../shared/helper/auth'\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nclass ProductDetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Quantity: 1,\r\n            rating: 1,\r\n            review: '',\r\n            user: { id: '' }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"PRODUCT ID\", this.props)\r\n        this.props.productInfoById(this.props.match.params.id);\r\n\r\n        let userdata = JSON.parse(localStorage.getItem(\"currentuser\"));\r\n        if (userdata) {\r\n            let { data: { data: { user } } } = userdata\r\n            this.state.user = user\r\n            // console.log(\"UserDetails\", userDetails.user.data.data.user.id)\r\n            console.log(\"USerDetails\", user.id)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (isAuthenticated()) {\r\n            let d = {\r\n                rating: this.state.rating,\r\n                review: this.state.review,\r\n                product: this.props.match.params.id,\r\n            }\r\n            console.log(d);\r\n            this.props.postReviewAction(d, d.product);\r\n            this.setState({ rating: '', review: '' })\r\n        }\r\n        else {\r\n\r\n            Swal.fire({\r\n                title: \"Alert\",\r\n                text: `Please Login First`,\r\n                icon: \"warning\",\r\n                timer: 2000,\r\n            })\r\n\r\n        }\r\n        this.setState({ rating: '', review: '' })\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n\r\n    onpostCart = () => {\r\n        this.props.postcartAction({ Quantity: this.state.Quantity }, this.props.match.params.id, this.state.user.id);\r\n    }\r\n\r\n    onrating = (event) => {\r\n        console.log(event)\r\n        this.setState({ rating: event })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const formatCurrency = (value) => {\r\n            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'INR', currencyDisplay: 'narrowSymbol' }).format(value)\r\n        }\r\n        if (this.props.loading) { return <Spinner /> }\r\n        if (!this.props.productInfo) { return null };\r\n        //console.log(\"DATA\", this.props.productInfo);\r\n        //console.log(\"ERROR Reducer\", this.props.postCartReducerError)\r\n        return (\r\n            <>\r\n                <div className=\"card container-fluid shadow-lg mt-4 p-3\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                <img className=\"img-fluid img-responsive border rounded\" src={this.props.productInfo.PImage} alt=\"Loading....\" />\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"card-body\">\r\n                                    <h4 className=\"card-title\">{this.props.productInfo.PName} </h4>\r\n                                    <p className=\"card-text\">\r\n                                        {this.props.productInfo.Description}\r\n                                    </p>\r\n\r\n                                    <h4>{formatCurrency(this.props.productInfo.Price)}</h4>\r\n\r\n                                    <div className=\"d-flex m-3 p-2\">\r\n                                        <Rating\r\n                                            value={this.props.productInfo.ratingsAverage}\r\n                                        />\r\n                                        <span className=\"h5\">({this.props.productInfo.ratingsQuantity})</span>\r\n                                    </div>\r\n\r\n                                    <div className=\"d-flex\">\r\n                                        <button type=\"button\" className=\"btn btn-lg btn-danger\" onClick={() => this.setState((prevstate, props) => ({ Quantity: prevstate.Quantity - 1 }))}>\r\n                                            <i\r\n                                                className=\"fal fa-minus-circle\" ></i>\r\n                                        </button>\r\n                                        <div className=\"p-3\">\r\n                                            <h1>{this.state.Quantity}</h1>\r\n                                        </div>\r\n\r\n                                        <button type=\"button\" className=\"btn btn-lg rounded btn-success\" onClick={() => this.setState((prevstate, props) => ({ Quantity: prevstate.Quantity + 1 }))}>\r\n                                            <i className=\"fas fa-plus-circle\"></i>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"m-2\">\r\n                                        <button\r\n                                            type=\"button\"\r\n                                            className=\"btn btn-lg btn-primary\"\r\n                                            onClick={() => this.onpostCart()}\r\n                                        >Add to Cart</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr />\r\n                    <div className=\"col-md-12\">\r\n                        <h1 className=\"h1 text-muted text-center\">Reviews</h1>\r\n                        <div className=\"col-md-12\">\r\n                            {\r\n                                this.props.productInfo.review.map((rev) => {\r\n                                    return (\r\n                                        <div className=\"card mt-2 p-3 shadow-lg\" key={rev.id}>\r\n                                            <div className=\"card-text\">\r\n                                                <Rating\r\n                                                    value={rev.rating}\r\n\r\n                                                />\r\n\r\n                                                <blockquote className=\"blockquote\">\r\n                                                    <p className=\"mb-0\">{rev.review}</p>\r\n                                                    <footer className=\"blockquote-footer\">{rev.user.Email}</footer>\r\n                                                </blockquote>\r\n\r\n                                                <span></span>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    <div className=\"col-md-12\">\r\n                        <h1 className=\"h1 text-muted text-center\">Give Your Review</h1>\r\n                        <div className=\"col-md-12 d-flex\">\r\n                            <span className=\"h3\">Ratings </span>\r\n                            <Rating\r\n                                name=\"rating\"\r\n                                value={this.state.rating}\r\n                                onChange={(e) => this.onrating(e)}\r\n                                max={5} />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12 m-2\">\r\n                            <div className=\"input-group\">\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    name=\"review\"\r\n                                    value={this.state.review}\r\n                                    aria-label=\"With textarea\"\r\n                                    onChange={this.handleInput}>\r\n                                </textarea>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12 d-flex m-2 p-3\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-success btn-lg btn-block\"\r\n                                onClick={this.handleSubmit}\r\n                            >Submit</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(\"PRODUCT DETAIL MAP\", state)\r\n    return {\r\n        productInfo: state.ShowProductDetailsId.item,\r\n        loading: state.ShowProductDetailsId.loading,\r\n        postCartReducer: state.postCartReducer.cartdata,\r\n        postCartReducerError: state.postCartReducer.error,\r\n        postReviewReducer: state.postReviewReducer.reviewdata,\r\n        loginuserdata: state.loginuserdata\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { productInfoById, postcartAction, postReviewAction })(ProductDetail)\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\Header.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\auth.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\localStorage.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\helper\\Cooky.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\Routes\\AdminRoute.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\AdminDashBoard.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\cartreducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\Cart.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\cart\\cart.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\CartDetail.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\Cart\\CartBill.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\cart\\cart.actions.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\cartapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\shared\\Routes\\UserRoute.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\reviewReducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\reviews\\reviews.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\reviews\\reviews.action.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\reviewapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\ProductAdmin.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\FeedBackAdmin.jsx",["363"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { deletefeeedbackAction, getfeedbackActions } from '../../actions/feedback/feedback.actions'\r\n\r\nfunction FeedBackAdmin() {\r\n\r\n    const dispatch = useDispatch();\r\n    const feeddetails = useSelector(state => state.getfeedreducer);\r\n    const delfeeddetails = useSelector(state => state.deletefeedreducer);\r\n    console.log(\"del\", delfeeddetails)\r\n    console.log(\"FEEDBACK COmpO\", feeddetails);\r\n    let { message, error } = feeddetails;\r\n\r\n    useEffect(() => {\r\n        dispatch(getfeedbackActions())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !message ? <h1> Loading data</h1> : <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {\r\n                                message.map((item) => {\r\n                                    return (\r\n                                        <div className=\"card shadow-lg m-3\" key={item._id}>\r\n                                            <div className=\"card-body\">\r\n                                                <div className=\"row\">\r\n\r\n                                                    <div className=\"col-md-8\">\r\n                                                        <blockquote className=\"blockquote\">\r\n                                                            <p className=\"mb-0\">{item.FeedBack}</p>\r\n                                                            <footer className=\"blockquote-footer\">{item.Name}</footer>\r\n                                                        </blockquote>\r\n\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col-md-2 mt-4\">\r\n                                                        <div className=\"sub-row\">\r\n                                                            <button\r\n                                                                type=\"button\"\r\n                                                                className=\"btn btn-danger btn-sm btn-block rounded\"\r\n                                                                onClick={() => dispatch(deletefeeedbackAction(item._id))}\r\n                                                            >Delete</button>\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default FeedBackAdmin;\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\CategoryAdmin.jsx",["364","365"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getCatActions, deleteCatActions, postCatActions, UpdateCatActions } from '../../actions/category/category.action'\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nexport default function CategoryAdmin() {\r\n    const [cname, setCat] = useState([])\r\n    const dispatch = useDispatch();\r\n\r\n    const getsubdtl = useSelector(state => state.getCatreducer);\r\n    console.log(\"Category data\", getsubdtl);\r\n\r\n    const postsubt = useSelector(state => state.postCatreducer)\r\n    console.log(\"CATEGORY\", postsubt)\r\n\r\n    const { data, error, loading } = getsubdtl;\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        let d = {\r\n            cname: cname\r\n        }\r\n        console.log(\"data ----\", d)\r\n        dispatch(postCatActions(d))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getCatActions())\r\n    }, [dispatch])\r\n\r\n    const updateCat = (id) => {\r\n        Swal.fire({\r\n            title: \"Category Name\",\r\n            input: \"text\",\r\n            inputAttributes: {\r\n                autocapitalize: \"off\",\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Update\",\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: (text) => {\r\n                if (!text.trim().length) {\r\n                    Swal.showValidationMessage(`Required!`);\r\n                } else if (text.trim().length < 3) {\r\n                    Swal.showValidationMessage(`Too Small Name!`);\r\n                }\r\n            },\r\n            allowOutsideClick: () => !Swal.isLoading(),\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                dispatch(UpdateCatActions(id, { \"cname\": result.value }))\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <button type=\"button\" className=\"btn btn-dark btn-block\" data-toggle=\"modal\" data-target=\"#exampleModal\" data-whatever=\"@mdo\">CATEGORY</button>\r\n                                <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                                    <div className=\"modal-dialog\" role=\"document\">\r\n                                        <div className=\"modal-content\">\r\n                                            <div className=\"modal-header\">\r\n                                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Category</h5>\r\n                                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                                    <span aria-hidden=\"true\">&times;</span>\r\n                                                </button>\r\n                                            </div>\r\n                                            <div className=\"modal-body\">\r\n                                                <form>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label htmlFor=\"recipient-name\" className=\"col-form-label\">Category:</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            name=\"cname\"\r\n                                                            className=\"form-control\"\r\n                                                            id=\"recipient-name\"\r\n                                                            value={cname}\r\n                                                            onChange={e => setCat(e.target.value)}\r\n                                                        />\r\n                                                    </div>\r\n\r\n                                                </form>\r\n                                            </div>\r\n                                            <div className=\"modal-footer\">\r\n                                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                                                <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={(e) => handleSubmit(e)}>Submit</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {\r\n                                !data ? <h1>LOADING DATA</h1> : (\r\n                                    <div className=\"card-body m-3\">\r\n                                        {\r\n                                            data.map((item) => {\r\n                                                return (\r\n                                                    <div className=\"card m-2 p-3\" key={item._id}>\r\n                                                        <ul className=\"list-group\">\r\n                                                            <li className=\"list-group-item d-flex justify-content-between\">{item.cname}\r\n                                                                <span>\r\n                                                                    <button type=\"button\" className=\"btn-sm btn-warning\"\r\n                                                                        onClick={() => updateCat(item._id)}>\r\n                                                                        <i className=\"fas fa-pen-square\"></i>\r\n                                                                    </button>\r\n                                                                </span>\r\n                                                                <span>\r\n                                                                    <button type=\"button\" className=\"btn-sm btn-danger\"\r\n                                                                        onClick={() => dispatch(deleteCatActions(item._id))}>\r\n                                                                        <i className=\"far fa-trash-alt\"></i>\r\n                                                                    </button>\r\n                                                                </span>\r\n\r\n                                                            </li>\r\n\r\n                                                        </ul>\r\n\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\SubCategory.jsx",["366","367"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport Swal from 'sweetalert2';\r\nimport { getSubCatActions, deleteSubCatActions, postSubCatActions, UpdateSubCatActions } from '../../actions/subcategory/subcategory.action'\r\n\r\nexport default function SubCategory() {\r\n    const [subname, setsub] = useState([])\r\n    //const [updsub,setupdsub] =useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const getsubdtl = useSelector(state => state.getSubCatreducer);\r\n    console.log(getsubdtl);\r\n\r\n    const postsubt = useSelector(state => state.postSubCatreducer)\r\n    console.log(\"SUBCATEGORY\", postsubt)\r\n\r\n    const updatereducer = useSelector(state => state.updateSubCatreducer)\r\n    console.log(\"UPDATE SUBCAT\", updatereducer);\r\n\r\n    const { data, error, loading } = getsubdtl;\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        let d = {\r\n            subname: subname\r\n        }\r\n        console.log(\"data ----\", d)\r\n        dispatch(postSubCatActions(d))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getSubCatActions())\r\n    }, [dispatch])\r\n\r\n    const updateCat = (id) => {\r\n        Swal.fire({\r\n            title: \"Category Name\",\r\n            input: \"text\",\r\n            inputAttributes: {\r\n                autocapitalize: \"off\",\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Update\",\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: (text) => {\r\n                if (!text.trim().length) {\r\n                    Swal.showValidationMessage(`Required!`);\r\n                } else if (text.trim().length < 3) {\r\n                    Swal.showValidationMessage(`Too Small Name!`);\r\n                }\r\n            },\r\n            allowOutsideClick: () => !Swal.isLoading(),\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                dispatch(UpdateSubCatActions(id, { \"subname\": result.value }))\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"card\">\r\n\r\n\r\n                            <div className=\"card-body\">\r\n                                <button type=\"button\" className=\"btn btn-dark btn-block\" data-toggle=\"modal\" data-target=\"#exampleModal2\" data-whatever=\"@mdo\">ADD SUBCATEGORY</button>\r\n                                <div className=\"modal fade\" id=\"exampleModal2\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                                    <div className=\"modal-dialog\" role=\"document\">\r\n                                        <div className=\"modal-content\">\r\n                                            <div className=\"modal-header\">\r\n                                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Sub Category</h5>\r\n                                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                                    <span aria-hidden=\"true\">&times;</span>\r\n                                                </button>\r\n                                            </div>\r\n                                            <div className=\"modal-body\">\r\n                                                <form>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label htmlFor=\"recipient-name\" className=\"col-form-label\">Sub Category:</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            name=\"subname\"\r\n                                                            className=\"form-control\"\r\n                                                            id=\"recipient-name\"\r\n                                                            value={subname}\r\n                                                            onChange={e => setsub(e.target.value)}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"modal-footer\">\r\n                                                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                                                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={(e) => handleSubmit(e)}>Submit</button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                            {\r\n                                !data ? <h1>LOADING DATA</h1> : (\r\n                                    <div className=\"card-body m-3\">\r\n                                        {\r\n                                            data.map((item) => {\r\n                                                return (\r\n                                                    <div className=\"card m-2 p-3\" key={item._id}>\r\n                                                        <ul className=\"list-group\">\r\n                                                            <li className=\"list-group-item d-flex justify-content-between\">{item.subname}\r\n                                                                <span>\r\n                                                                    <button\r\n                                                                        type=\"button\"\r\n                                                                        className=\"btn-sm btn-warning\"\r\n                                                                        onClick={() => updateCat(item._id)}\r\n                                                                    >\r\n                                                                        <i className=\"fas fa-pen-square\"></i>\r\n                                                                    </button>\r\n                                                                </span>\r\n                                                                <span>\r\n                                                                    <button type=\"button\" className=\"btn-sm btn-danger\"\r\n                                                                        onClick={() => dispatch(deleteSubCatActions(item._id))}>\r\n                                                                        <i className=\"far fa-trash-alt\"></i>\r\n                                                                    </button>\r\n                                                                </span>\r\n                                                            </li>\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\subcategoryreducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\subcategory\\subcategory.action.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\subcategory\\subcategory.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\getSubcategory.js",[],["368","369"],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\forgotPassword\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\forgotPassword\\forgotPassword.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\resetPassword\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\resetPassword\\ResetPassword.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\categoryreducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\category\\category.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\category\\category.action.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\categoryapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\forgotreducer.js",["370"],"import { FORGOT_PASS, LOADING, RESET_PASS, ERROR } from '../../src/actions/forgot/forgot.type'\r\n\r\nexport const forgotpassReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FORGOT_PASS:\r\n            return {\r\n                data: action.payload\r\n            }\r\n        case ERROR:\r\n            return { error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ResetpassReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case RESET_PASS:\r\n            return {\r\n                data: action.payload\r\n            }\r\n        case ERROR:\r\n            return { error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\forgot\\forgot.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\forgot\\forgot.action.js",["371"],"import { FORGOT_PASS, LOADING, RESET_PASS, ERROR } from './forgot.type'\r\nimport { forgotpassapi, resetpassapi } from '../../api/forgotpasswordapi'\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const forgotPasswordActions = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await forgotpassapi(data);\r\n            console.log(\"FORGOT ACTIONS\", response)\r\n            dispatch({\r\n                type: FORGOT_PASS,\r\n                payload: response.data\r\n            })\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: response.data.message,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n                customClass: 'slow-animation'\r\n            })\r\n        } catch (error) {\r\n            dispatch({\r\n                type: ERROR,\r\n                payload: error.response\r\n            })\r\n            console.log(\"ERROR\", error.response)\r\n            Swal.fire({\r\n                title: \"Oops....!\",\r\n                text: \"Something went wrong\",\r\n                //text: error.response.data.message,\r\n                icon: \"error\",\r\n                timer: 2000,\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const ResetPasswordActions = (token, data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await resetpassapi(token, data);\r\n            console.log(\"RESET ACTIONS\", response)\r\n            dispatch({\r\n                type: RESET_PASS,\r\n                payload: response.data\r\n            })\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: \"Password Updated Successfully\",\r\n                icon: \"success\",\r\n                timer: 2000,\r\n                customClass: 'slow-animation'\r\n            })\r\n        } catch (error) {\r\n            dispatch({\r\n                type: ERROR,\r\n                payload: error.response\r\n            })\r\n            console.log(\"ERROR\", error.response)\r\n            Swal.fire({\r\n                title: \"Oops....!\",\r\n                text: \"Something went wrong\",\r\n                //text: error.response.data.message,\r\n                icon: \"error\",\r\n                timer: 2000,\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\forgotpasswordapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\ShippingScreen.jsx",["372"],"import React from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { CheckOutSteps } from './CheckOutSteps'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\nconst formSchema = Yup.object().shape({\r\n    Address: Yup.string()\r\n        .min(3, 'Address atleast have 3 characters')\r\n        .required('This field is required')\r\n        .trim(),\r\n\r\n    City: Yup.string()\r\n        .min(2, 'City atleast have 2 characters')\r\n        .required('This field is required')\r\n        .trim(),\r\n\r\n    PostalCode: Yup.number()\r\n        .required('This field is required'),\r\n\r\n\r\n    Country: Yup.string()\r\n        .min(3, \"Minimum 3 characters is required \")\r\n        .required('This field is required'),\r\n})\r\n\r\n\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n    console.log(history)\r\n    const getItems = JSON.parse(localStorage.getItem(\"shipping\"));\r\n    console.log(getItems)\r\n    //console.log(getItems.Address);\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <CheckOutSteps step1 />\r\n                        <div className=\"card shadow-lg\">\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"text-center text-muted\">Shipping Details</h1>\r\n                                <hr />\r\n\r\n                                <Formik\r\n                                    initialValues={\r\n                                        {\r\n                                            Address: (getItems === null ? '' : getItems.Address),\r\n                                            City: (getItems === null ? '' : getItems.City),\r\n                                            PostalCode: (getItems === null ? '' : getItems.PostalCode),\r\n                                            Country: (getItems === null ? '' : getItems.Country)\r\n                                        }\r\n                                    }\r\n\r\n                                    validationSchema={formSchema}\r\n                                    onSubmit={async (values, actions) => {\r\n                                        await sleep(500);\r\n                                        // console.log({ shippingAddress: values })\r\n                                        localStorage.setItem(\"shipping\", JSON.stringify(values))\r\n                                        setTimeout(() => {\r\n                                            actions.setSubmitting(false)\r\n                                            actions.resetForm()\r\n                                        }, 1000)\r\n                                        history.push('/payment')\r\n\r\n                                    }}>\r\n\r\n                                    {({ isSubmitting, touched, errors, values }) => (\r\n                                        <Form >\r\n                                            <div className=\"m-4\">\r\n                                                <Field\r\n                                                    id=\"Address\"\r\n                                                    type=\"text\"\r\n                                                    name=\"Address\"\r\n                                                    placeholder=\"Enter your Address\"\r\n                                                    autoComplete=\"off\"\r\n                                                    value={values.Address}\r\n                                                    className={`form-control  ${(touched.Address && errors.Address) ? 'border border-danger' : 'is-valid'}`}\r\n                                                />\r\n                                                <ErrorMessage name=\"Address\" />\r\n                                            </div>\r\n\r\n                                            <div className=\"m-4\">\r\n                                                <Field\r\n                                                    id=\"City\"\r\n                                                    type=\"text\"\r\n                                                    name=\"City\"\r\n                                                    placeholder=\"Enter your City\"\r\n                                                    autoComplete=\"off\"\r\n                                                    className={`form-control  ${(touched.City && errors.City) ? 'border border-danger' : 'is-valid'}`}\r\n                                                />\r\n                                                <ErrorMessage name=\"City\" />\r\n                                            </div>\r\n\r\n                                            <div className=\"m-4\">\r\n                                                <Field\r\n                                                    id=\"PostalCode\"\r\n                                                    type=\"number\"\r\n                                                    name=\"PostalCode\"\r\n                                                    placeholder=\"Enter your PostalCode\"\r\n                                                    autoComplete=\"off\"\r\n                                                    className={`form-control  ${(touched.PostalCode && errors.PostalCode) ? 'border border-danger' : 'is-valid'}`}\r\n                                                />\r\n                                                <ErrorMessage name=\"PostalCode\" />\r\n                                            </div>\r\n\r\n                                            <div className=\"m-4\">\r\n                                                <Field\r\n                                                    id=\"country\"\r\n                                                    type=\"Country\"\r\n                                                    name=\"Country\"\r\n                                                    placeholder=\"Enter your Country\"\r\n                                                    autoComplete=\"off\"\r\n                                                    className={`form-control ${(touched.Country && errors.Country) ? 'border border-danger' : 'is-valid'}`}\r\n                                                />\r\n                                                <ErrorMessage name=\"Country\" />\r\n                                            </div>\r\n\r\n\r\n                                            <div className=\"d-flex justify-content-center m-3\">\r\n                                                <button\r\n                                                    type=\"submit\"\r\n                                                    className=\"btn btn-primary btn-lg col-6\"\r\n                                                    disabled={isSubmitting}\r\n                                                >\r\n                                                    {isSubmitting ? \"Please Wait\" : \"Submit\"}\r\n                                                </button >\r\n                                            </div>\r\n\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\CheckOutSteps.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\Payment.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\orderShipping\\PlaceOrder.jsx",["373","374"],"import React, { useEffect } from 'react';\r\nimport { CheckOutSteps } from './CheckOutSteps'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getCartActions } from '../../actions/cart/cart.actions'\r\nimport { postOrderAction } from '../../actions/ordershipping/order.action'\r\nimport { CREATE_DETAILS_RESET } from '../../actions/ordershipping/order.type'\r\n\r\nexport default function PlaceOrder() {\r\n    const ship = JSON.parse(localStorage.getItem(\"shipping\"));\r\n    const pay = JSON.parse(localStorage.getItem(\"payment\"));\r\n    const dispatch = useDispatch();\r\n    const getcartDetail = useSelector(state => state.getCartReducer)\r\n    const { loading, cartdata, error } = getcartDetail\r\n\r\n    const { loading: postOrederLoading, error: postOrederError, success } = useSelector(state => state.postOrderReducer)\r\n\r\n    var { user: { data: { data: { user } } } } = useSelector(state => state.loginuserdata)\r\n    // console.log(\"UserDetails\", userDetails.user.data.data.user.id)\r\n    console.log(\"USerDetails\", user.id)\r\n    useEffect(() => {\r\n        if (success) {\r\n            dispatch({ type: CREATE_DETAILS_RESET })\r\n        }\r\n        dispatch(getCartActions(user.id))\r\n    }, [dispatch, user, success])\r\n\r\n    console.log(\"cartDetails \", cartdata)\r\n\r\n    const totalValue = cartdata.reduce((t, { totalPrice }) => t + totalPrice, 0).toFixed(2)\r\n    console.log(totalValue)\r\n    const shippingPrice = totalValue > 1000 ? 0 : totalValue + 500;\r\n    const taxPrice = (0.18 * totalValue).toFixed(2);\r\n\r\n    const finalPrice = (Number(totalValue) + Number(shippingPrice) + Number(taxPrice)).toFixed(2);\r\n\r\n    const placeHolder = () => {\r\n        let body = {\r\n            total: finalPrice,\r\n            shippingAddress: ship,\r\n            paymentMethod: pay.Payment,\r\n            shippingPrice: shippingPrice,\r\n            taxPrice: taxPrice,\r\n\r\n        }\r\n        dispatch(postOrderAction(body))\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            {error && (<h1 className=\"text-danger\">{error}</h1>)}\r\n            {(loading) && <h1>LOADING</h1>}\r\n            { ship && (\r\n                <div className=\"container-fluid mt-5\">\r\n                    <div className=\"row\">\r\n                        <CheckOutSteps step1 step2 step3 />\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"card text-left\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"card-body\">\r\n                                            <h1 className=\"h1 text-muted\">SHIPPING</h1>\r\n                                            <span className=\"lead\">{ship.Address},{ship.City},{ship.PostalCode},{ship.Country}</span>\r\n\r\n                                            <hr />\r\n\r\n                                            <h1 className=\"h1 text-muted\">PAYMENT METHOD</h1>\r\n                                            <span className=\"lead\">Method : {pay.Payment}</span>\r\n                                            <hr />\r\n\r\n                                            <h1 className=\"h1 text-muted\">ORDER ITEMS</h1>\r\n\r\n                                            <ul className=\"list-group\">\r\n\r\n                                                {\r\n\r\n                                                    cartdata.map((i) => {\r\n                                                        return (\r\n                                                            <li className=\"list-group-item\" key={i.id}>\r\n                                                                {i.totalPrice}\r\n                                                                <br />\r\n                                                                {i.Quantity}\r\n\r\n                                                            </li>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                                <hr />\r\n                                            </ul>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-4 m-2\">\r\n                                        <div className=\"card text-left\">\r\n                                            <div className=\"card-body\">\r\n                                                <h3 className=\"h3 text-center bold\">ORDER SUMMARY</h3>\r\n                                                <hr />\r\n                                                <h5>Items:{cartdata.reduce((t, p) => (t + p.Quantity), 0)}</h5>\r\n\r\n                                                <hr />\r\n                                                <h5>Shipping:{shippingPrice}</h5>\r\n                                                <hr />\r\n                                                <h5>Tax:{taxPrice}</h5>\r\n                                                <hr />\r\n                                                <h5>Total:{finalPrice}</h5>\r\n                                                <hr />\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    className=\"btn btn-primary btn-lg btn-block\"\r\n                                                    onClick={() => placeHolder()}>Place Order</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\reducer\\orderreducer.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\ordershipping\\order.type.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\App.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\OrderList.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\UserProfile.jsx",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\actions\\ordershipping\\order.action.js",["375"],"import {\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_DETAILS_SUCCESSID,\r\n    CREATE_DETAILS_REQUEST,\r\n    CREATE_DETAILS_SUCCESS,\r\n    CREATE_DETAILS_FAIL,\r\n\r\n    ORDER_UPDATE_REQUEST,\r\n    ORDER_UPDATE_SUCCESS,\r\n    ORDER_UPDATE_FAIL,\r\n\r\n\r\n    ORDER_ADMIN_REQUEST,\r\n    ORDER_ADMIN_SUCCESS,\r\n    ORDER_ADMIN_FAIL\r\n\r\n} from './order.type'\r\nimport { getAllOrdersapi, getOrdersbyid, postOrdersapi, UpdateOrdersApiAdmin, AllordersApi } from '../../api/ordershippingapi'\r\nimport Swal from 'sweetalert2';\r\nimport { history } from '../../shared//helper/history'\r\n// ---------------------- GET ALL ORDERS -----------------\r\n\r\nexport const getOrdersBYIdAction = (orderid) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: ORDER_DETAILS_REQUEST })\r\n            const response = await getOrdersbyid(orderid);\r\n            console.log(\"All Order ID Action\", response)\r\n            dispatch({\r\n                type: ORDER_DETAILS_SUCCESSID,\r\n                payload: response.data.data\r\n            })\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: ORDER_DETAILS_FAIL,\r\n                payload: error.response\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//------------------------ UPDATE ORDERS TO BE PAID ----------------------\r\nexport const getAllOrdersAction = (orderid) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: ORDER_DETAILS_REQUEST })\r\n            const response = await getAllOrdersapi();\r\n            console.log(\"All Order Action \", response)\r\n            dispatch({\r\n                type: ORDER_DETAILS_SUCCESS,\r\n                payload: response.data.data\r\n            })\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: ORDER_DETAILS_FAIL,\r\n                payload: error.response\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n//------------------ POST ORDER -----------\r\n\r\nexport const postOrderAction = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: CREATE_DETAILS_REQUEST })\r\n            const response = await postOrdersapi(data);\r\n            console.log(\"All Order Action\", response)\r\n            dispatch({\r\n                type: CREATE_DETAILS_SUCCESS,\r\n                payload: response.data\r\n            })\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: `Payment Successfully`,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n            })\r\n            history.push('/orders')\r\n            window.location.reload();\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: CREATE_DETAILS_FAIL,\r\n                payload: error.response\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n//----------------- GET ORDER ACTION ADMIN------------------\r\nexport const getOrdersAdmin = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: ORDER_ADMIN_REQUEST })\r\n            const response = await AllordersApi();\r\n            console.log(\"All Order ID Action Admin\", response)\r\n            dispatch({\r\n                type: ORDER_ADMIN_SUCCESS,\r\n                payload: response.data.data\r\n            })\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: ORDER_ADMIN_FAIL,\r\n                payload: error.response\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//-------------------- UPDATE ORDER ACTION ADMIN-----------------\r\n\r\nexport const UpdateOrderAdminAction = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            console.log(\"ID ACTION\", id)\r\n            //dispatch({ type: ORDER_UPDATE_REQUEST })\r\n            const response = await UpdateOrdersApiAdmin(id);\r\n            console.log(\"Update Order Action\", response)\r\n            dispatch({\r\n                type: ORDER_UPDATE_SUCCESS,\r\n                payload: response.data\r\n            })\r\n            Swal.fire({\r\n                title: \"Done!\",\r\n                text: `Delivered Successfully`,\r\n                icon: \"success\",\r\n                timer: 2000,\r\n            })\r\n\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: ORDER_UPDATE_FAIL,\r\n                payload: error.response\r\n            })\r\n        }\r\n    }\r\n}","E:\\ReactEcommerceFrontend\\ecommerce\\src\\api\\ordershippingapi.js",[],"E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\OrdersDashBoard\\OrderDetail.jsx",["376"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getOrdersBYIdAction } from '../../actions/ordershipping/order.action'\r\n\r\nexport default function OrderDetail() {\r\n\r\n    const dispatch = useDispatch();\r\n    const orderlist = useSelector(state => state.getOrderByIdReducer);\r\n    console.log(\"ORDER DETAILS\", orderlist)\r\n\r\n\r\n    const { loading, error, orderdataId: orderdata } = orderlist;\r\n\r\n    useEffect(() => {\r\n        dispatch(getOrdersBYIdAction(window.location.pathname.split(\"/\")[2]));\r\n    }, [dispatch])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {(error) && (<h1 className=\"text-danger\">{error}</h1>)}\r\n            {(loading) && <h1>LOADING</h1>}\r\n\r\n            <div className=\"container-fluid mt-5 mb-5\">\r\n                <div className=\"row\">\r\n                    {\r\n                        (!orderdata || !orderdata.shippingAddress) ? <h1>No Data</h1> :\r\n                            (\r\n                                <>\r\n                                    <div className=\"col-md-7\" key={orderdata._id}>\r\n                                        <div className=\"card\">\r\n                                            <div className=\"card-body\">\r\n                                                <h4 className=\"h4 text-center text-muted\">SHIPPING</h4>\r\n                                                <span className=\"p-4 m-2 text-muted\">ADDRESS:</span>{orderdata.shippingAddress.Address}<br />\r\n                                                <span className=\"p-4 m-2 text-muted\">CITY:</span>{orderdata.shippingAddress.City}<br />\r\n                                                <span className=\"p-4 m-2 text-muted\">COUNTRY:</span>{orderdata.shippingAddress.Country}<br />\r\n                                                <span className=\"p-4 m-2 text-muted\">POSTAL CODE:</span>{orderdata.shippingAddress.PostalCode}<br />\r\n\r\n\r\n                                            </div>\r\n                                            <hr />\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-4\">\r\n                                                    <h4 className=\"h4 text-center text-muted\">PAYMENT METHOD</h4>\r\n                                                    <h5 className=\"h4 text-center\">{orderdata.paymentMethod}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"col-md-4\">\r\n                                                    <h4 className=\"h4 text-center text-muted\">PAYMENT STATUS</h4>\r\n                                                    <div className=\"alert alert-success text-center\" role=\"alert\">\r\n                                                        Paid\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-4\">\r\n                                                    <h4 className=\"h4 text-center text-muted\">DELIVERY STATUS</h4>\r\n                                                    {orderdata.isDelivered ? <h5 className=\"alert alert-success text-center\">Delivered</h5> : <h5 className=\"alert alert-danger text-center\">NOt delivered</h5>}\r\n                                                </div>\r\n                                            </div>\r\n                                            <hr />\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-12\">\r\n                                                    <div className=\"card\">\r\n                                                        <ul className=\"list-group\">\r\n                                                            {\r\n                                                                orderdata.products.map((item) => {\r\n                                                                    return (\r\n                                                                        <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={item._id}>\r\n                                                                            <img src={item.productId.PImage} className=\"img-thumbnail\" style={{ width: 100 }} />\r\n                                                                            <h5>{item.productId.PName}</h5>\r\n                                                                            {item.Quantity}x\r\n                                                                            {item.productId.Price}={item.Quantity * item.productId.Price}\r\n                                                                        </li>\r\n                                                                    )\r\n\r\n                                                                })\r\n                                                            }\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-5\">\r\n                                        <div className=\"card shadow-lg\">\r\n                                            <div className=\"card-body\">\r\n                                                <h3 className=\"h3 text-center bold\">ORDER SUMMARY</h3>\r\n                                                <hr />\r\n                                                <h5 className=\"d-flex justify-content-between align-items-center\">Items:<span>{Object.values(orderdata.products).reduce((t, { Quantity }) => t + Quantity, 0)}</span></h5>\r\n\r\n                                                <hr />\r\n                                                <h5 className=\"d-flex justify-content-between align-items-center\">Shipping:<span>{orderdata.shippingPrice}</span></h5>\r\n                                                <hr />\r\n                                                <h5 className=\"d-flex justify-content-between align-items-center\">Tax:<span>{orderdata.taxPrice}</span></h5>\r\n                                                <hr />\r\n                                                <h5 className=\"d-flex justify-content-between align-items-center\">Total:<span>{orderdata.total}</span></h5>\r\n                                                <hr />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </>\r\n\r\n                            )\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","E:\\ReactEcommerceFrontend\\ecommerce\\src\\components\\AdminDashBoard\\OrderAdmin.jsx",["377","378"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getOrdersAdmin, UpdateOrderAdminAction } from '../../actions/ordershipping/order.action'\r\nimport { ORDER_UPDATE_RESET } from '../../actions/ordershipping/order.type'\r\n\r\nexport default function OrderAdmin() {\r\n    const dispatch = useDispatch();\r\n\r\n    const orderdetails = useSelector(state => state.getOrderByIdAdminReducer)\r\n    console.log(\"ORDER ADMIN\", orderdetails)\r\n\r\n\r\n\r\n    const updatedetails = useSelector(state => state.UpdateAdminReducer)\r\n\r\n    const { success, loading, error } = updatedetails;\r\n    console.log(\"UPDATE ORDER ADMIN\", updatedetails)\r\n    useEffect(() => {\r\n        if (success) {\r\n            dispatch({ type: ORDER_UPDATE_RESET })\r\n        }\r\n        dispatch(getOrdersAdmin())\r\n    }, [dispatch, success])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                !orderdetails.orderdata ? <h1>LOADING....</h1> : (\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body\">\r\n                                        <ul className=\"list-group\">\r\n                                            {\r\n                                                orderdetails.orderdata.map((i) => {\r\n                                                    return (\r\n\r\n                                                        <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={i._id}>\r\n                                                            <span className=\"text-muted\">Order ID- {i._id}</span>\r\n\r\n                                                            <h5 className=\"mt-2\">Status:{i.isPaid ? <span className=\"badge badge-success \">Paid</span> : <span className=\"badge badge-danger\">Not Paid</span>}</h5>\r\n                                                            {i.isDelivered ? <button className=\"btn btn-success\" onClick={() => dispatch(UpdateOrderAdminAction(i._id))}>\r\n                                                                Delivered\r\n                                                            </button> : <button className=\"btn btn-danger\" onClick={() => dispatch(UpdateOrderAdminAction(i._id))}>\r\n                                                                    Not Delivered\r\n                                                            </button>}\r\n\r\n                                                        </li>\r\n\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n\r\n        </>\r\n    );\r\n}\r\n",{"ruleId":"379","replacedBy":"380"},{"ruleId":"381","replacedBy":"382"},{"ruleId":"383","severity":1,"message":"384","line":2,"column":8,"nodeType":"385","messageId":"386","endLine":2,"endColumn":14},{"ruleId":"383","severity":1,"message":"387","line":1,"column":17,"nodeType":"385","messageId":"386","endLine":1,"endColumn":26},{"ruleId":"383","severity":1,"message":"388","line":38,"column":13,"nodeType":"385","messageId":"386","endLine":38,"endColumn":20},{"ruleId":"383","severity":1,"message":"389","line":38,"column":28,"nodeType":"385","messageId":"386","endLine":38,"endColumn":33},{"ruleId":"383","severity":1,"message":"390","line":47,"column":28,"nodeType":"385","messageId":"386","endLine":47,"endColumn":45},{"ruleId":"383","severity":1,"message":"391","line":47,"column":54,"nodeType":"385","messageId":"386","endLine":47,"endColumn":69},{"ruleId":"383","severity":1,"message":"392","line":50,"column":37,"nodeType":"385","messageId":"386","endLine":50,"endColumn":51},{"ruleId":"383","severity":1,"message":"393","line":50,"column":60,"nodeType":"385","messageId":"386","endLine":50,"endColumn":72},{"ruleId":"394","severity":1,"message":"395","line":20,"column":21,"nodeType":"385","messageId":"396","endLine":20,"endColumn":29},{"ruleId":"397","severity":1,"message":"398","line":31,"column":13,"nodeType":"399","endLine":31,"endColumn":23},{"ruleId":"383","severity":1,"message":"389","line":12,"column":20,"nodeType":"385","messageId":"386","endLine":12,"endColumn":25},{"ruleId":"383","severity":1,"message":"389","line":17,"column":19,"nodeType":"385","messageId":"386","endLine":17,"endColumn":24},{"ruleId":"383","severity":1,"message":"388","line":17,"column":26,"nodeType":"385","messageId":"386","endLine":17,"endColumn":33},{"ruleId":"383","severity":1,"message":"389","line":20,"column":19,"nodeType":"385","messageId":"386","endLine":20,"endColumn":24},{"ruleId":"383","severity":1,"message":"388","line":20,"column":26,"nodeType":"385","messageId":"386","endLine":20,"endColumn":33},{"ruleId":"379","replacedBy":"400"},{"ruleId":"381","replacedBy":"401"},{"ruleId":"383","severity":1,"message":"402","line":1,"column":23,"nodeType":"385","messageId":"386","endLine":1,"endColumn":30},{"ruleId":"383","severity":1,"message":"402","line":1,"column":23,"nodeType":"385","messageId":"386","endLine":1,"endColumn":30},{"ruleId":"383","severity":1,"message":"403","line":5,"column":10,"nodeType":"385","messageId":"386","endLine":5,"endColumn":14},{"ruleId":"383","severity":1,"message":"390","line":16,"column":22,"nodeType":"385","messageId":"386","endLine":16,"endColumn":39},{"ruleId":"383","severity":1,"message":"391","line":16,"column":48,"nodeType":"385","messageId":"386","endLine":16,"endColumn":63},{"ruleId":"383","severity":1,"message":"404","line":10,"column":5,"nodeType":"385","messageId":"386","endLine":10,"endColumn":25},{"ruleId":"405","severity":1,"message":"406","line":71,"column":77,"nodeType":"407","endLine":71,"endColumn":161},{"ruleId":"383","severity":1,"message":"388","line":16,"column":22,"nodeType":"385","messageId":"386","endLine":16,"endColumn":29},{"ruleId":"383","severity":1,"message":"389","line":16,"column":31,"nodeType":"385","messageId":"386","endLine":16,"endColumn":36},"no-native-reassign",["408"],"no-negated-in-lhs",["409"],"no-unused-vars","'Filter' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'postOrederLoading' is assigned a value but never used.","'postOrederError' is assigned a value but never used.","'postSubLoading' is assigned a value but never used.","'postSubError' is assigned a value but never used.","no-redeclare","'response' is already defined.","redeclared","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",["408"],["409"],"'LOADING' is defined but never used.","'Link' is defined but never used.","'ORDER_UPDATE_REQUEST' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]